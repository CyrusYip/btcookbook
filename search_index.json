[
["index.html", "TNT 擂台赛 Tidyverse vs. Non-Tidyverse: To be or not to be 序言", " TNT 擂台赛 Tidyverse vs. Non-Tidyverse: To be or not to be 大鹏（编） 2019-08-14 序言 前些天有感而发： cosx 快成了 Base R vs. TidyVerse 的擂台了。 有一天突发奇想： 建议以后对 cosx 所有的提问都给出 Base R 版和 Tidyverse 版 。做做大脑体操。简称 B 版和 T 版。我自告奋勇整理成书。书名我都想好了：BT 擂台赛。 于是建了个 bookdown 项目： 预览：https://pzhaonet.github.io/btcookbook Repo: https://github.com/pzhaonet/btcookbook 然而，始料未及的是，有些朋友对如何界定 Base R 提出了不同的意见。这个确实比较头大，尤其对我这样一个既不是搞数据科学的，又不是搞统计学的来说更为如此。我重申：可能“擂台赛”这个词有些误导，然而其实并不是要他们分输赢，而是通过比较来强化我们对他们的理解和消化。 为了避免不必要的误会和纷争，这个项目改名 为 Tidyverse vs. Non-Tidyverse (TNT) 擂台赛。TNT 背后的含义可以是 “To be or Not To be”。希望因改名而淡化一些火药味。学习为主。欢迎有志之士加入一起完成。 本文素材来自统计之都。文中每个示例均列出了原始出处。感谢各位贡献者。 "],
["section-1.html", "1 曲线簇", " 1 曲线簇 题目：函数 \\(xy = z\\)，\\(z\\) 取值为 1、2、3、4， \\(x\\) 和 \\(y\\) 的取值区间为 (0, 10]，如何画出这4条曲线？ N 版 x &lt;- seq(0.1, 10, by = 0.1) plot(x, 1 / x, type = &quot;l&quot;, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) for (z in 2:4) lines(x, z / x, col = z) legend(&quot;topright&quot;, legend = 1:4, col = 1:4, lty = 1, title = &quot;z&quot; ) # or for (z in 4:1) { curve(z / x, 0, 10, add = z &lt; 4, col = z) } legend(&quot;topright&quot;, legend = 4:1, col = 4:1, lty = 1, title = &quot;z&quot; ) # or matplot(outer( seq(0.1, 10, by = 0.1), 1:4, function(x, a) a / x ), xlab = &quot;x&quot;, ylab = &quot;z/x&quot;, type = &quot;l&quot;, col = 1:4, lty = 1 ) legend(&quot;topright&quot;, legend = 4:1, col = 4:1, lty = 1, title = &quot;z&quot; ) T 版 library(ggplot2) library(magrittr) expand.grid( x = seq(0.1, 10, by = 0.1), z = 1:4 ) %&gt;% transform(y = z / x, z = factor(z)) %&gt;% ggplot() + geom_line(aes(x, y, color = z)) + coord_cartesian(ylim = c(0, 10), expand = F) # Or out &lt;- ggplot(data.frame(x = c(0, 10)), aes(x)) for (i in 1:4) { out = out + stat_function(fun = function(.x ,z) z/.x, color = i, args = list(z=i), xlim=c(i/10,10) ) } out "],
["section-2.html", "2 直方图的对数坐标", " 2 直方图的对数坐标 题目：如何绘制对数坐标的直方图？ # 准备数据 set.seed(1) mydata &lt;- rnorm(100) N 版 myhist &lt;- hist(mydata, plot = FALSE) plot(myhist$mids, myhist$counts, log = &quot;y&quot;, type = &#39;h&#39;) # or myhist_log &lt;- myhist myhist_log$counts &lt;- log10(myhist_log$counts) plot(myhist_log, ylab = &#39;log(Frequency)&#39;) T 版 library(ggplot2) ggplot() + geom_histogram(aes(mydata), breaks = seq(-2, 2, 0.5)) + scale_y_log10() "],
["section-3.html", "3 绘制地图", " 3 绘制地图 题目：ggplot 绘制世界地图的基本方法是这样的： require(ggplot2) p &lt;- ggplot(map_data(&quot;world&quot;), aes(long,lat,group=group)) + geom_polygon() p 我想根据经纬度的范围来切出一块来，例如： lr &lt;- c(-140, 120) p + coord_map(xlim = lr) 就乱套了，有些地方出现了横跨左右的冗余色块。如果改用 geom_path() 则出现冗余线条。 SO 上类似的讨论给出的解答只在 xlim=c(-180,180) 适用。换个小范围就不行了。 ggplot2 官方说明书 章节末尾给出的示例图就是乱的，居然没有任何说明： 中文社区有文章详细介绍如何画地图，然而给的示例中，同样无视这个问题： 如何能做出纬度均匀、无冗余色块、展示宽广区域的地图呢？ N 版 使用 maps 包，用 xlim 和 ylim 指定范围即可。 maps::map(&quot;world&quot;, fill=TRUE, col=&quot;white&quot;, bg=&quot;lightblue&quot;, xlim = c(-140, 120)) T 版 在 coord_map() 函数里用 projection 更换投影坐标系，用 orientation 选择视角。 例如，用默认投影和北极视角，可以消除冗余色块，但是纬度不均匀。 p + coord_map(xlim = lr, orientation = c(90, 0, 0)) + scale_y_continuous(breaks = -9:9 * 10) 如果用球面投影 “ortho”，纬度虽然不均匀，但显示在球面上更为自然，可是球背面就被挡住了，非洲和南美洲很难看到： p + coord_map(&quot;orthographic&quot;, xlim = lr) 完美解决方案是用 coord_quickmap(): p + coord_quickmap(xlim = lr) "],
["section-4.html", "4 从字符串里提取年和月", " 4 从字符串里提取年和月 题目：部分数据集展示如下，我现在能想到的分离办法就是写正则表达式，还有没有更方便的办法？ x &lt;- c(&#39;2019-06-30 21:44:44&#39;, &#39;2019-06-30 21:32:29&#39;, &#39;2019-06-30 12:14:25&#39;) N 版 y &lt;- strptime(x, format = &#39;%Y-%m-%d %H:%M:%S&#39;) format(y, &#39;%Y&#39;) ## [1] &quot;2019&quot; &quot;2019&quot; &quot;2019&quot; format(y, &#39;%m&#39;) ## [1] &quot;06&quot; &quot;06&quot; &quot;06&quot; T 版 lubridate::year(x) ## [1] 2019 2019 2019 lubridate::month(x) ## [1] 6 6 6 "],
["section-5.html", "5 数据框筛选重写", " 5 数据框筛选重写 题目：数据框 mtcars，对满足某些条件比如行 2 到 5、列为 ‘cyl’ 的数据进行重写，重写的条件为如果该值小于 6 就重写为 2。 N 版 mtcars$cyl[2:5][mtcars$cyl[2:5] &lt; 6] &lt;- 2 # or transform(mtcars[2:5,], new_cyl = ifelse(cyl &lt; 6, 2, cyl)) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 2 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## new_cyl ## Mazda RX4 Wag 6 ## Datsun 710 2 ## Hornet 4 Drive 6 ## Hornet Sportabout 8 T 版 library(dplyr) m1 &lt;- mtcars %&gt;% filter(row_number() %in% 2:5) %&gt;% mutate_at(vars(cyl), ~ ifelse(. &lt; 6, . &lt;- 2, . &lt;- 6)) # or mtcars %&gt;% mutate(cyl = ifelse( (row_number() %in% 2:5 &amp;cyl &lt; 6), 2, cyl)) %&gt;% head() ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## 3 22.8 2 108 93 3.85 2.320 18.61 1 1 4 1 ## 4 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## 5 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## 6 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 &lt;–! "],
["title.html", "6 Title", " 6 Title 题目： N 版 T 版 –&gt; "],
["e5908ee8aeb03c6120687265663d2223666e312220636c6173733d22666f6f746e6f74652d726566222069643d22666e72656631223e3c7375703e313c2f7375703e3c2f613e.html", "后记1", " 后记1 1 R 语言的”极乐净土“ tidyverse 包，对我而言是个奇葩的存在。就像它的颜值担当成员”哥哥画图呃“ ggplot2 一样，这个东西我学起来用起来特别吃力。 网上到处都是对 tidyverse 一片喝彩，几乎听不到任何负面的声音，这个现象我觉得很奇怪。比如搜一下“tidyverse 缺点 不足 问题”，是搜不到结果的。这让我有点警惕。不过，这是个数据科学领域的工具，我是外行，而且年岁大了，可能是我自己的问题吧。R 基础包已经够我了此残生了，tidyverse 学不会就算了吧。 然而见得多了，发现不学不行了。比如有人在 Stack Overflow 提了个问题，得到的是 tidyverse 版的回答，不懂 %&gt;% 是啥的话还真看不懂，虽然明明是基础函数就能解决。 原来，国王连锄地都用金锄头啊！ 我隐隐担忧起来。万一世界被 tidyverse 一统江湖，我遇见基础包的问题可咋办，问都没处问去，人家解答了我也看不懂…… 不止我一个人有这种困惑。 比如，一个朋友就私下向我抱怨： 如果在论坛提问如何用 R 做个什么图，那么回帖最多的肯定是用 ggplot。然而 ggplot 各种诡异和思想颠覆，太难记，要是一点不懂 R 的基础绘图还好点。有的图，基础包两三句就行， ggplot 要隆重地写上很大一段，满满的仪式感。 的确如此。 举两个例子。 比如，我想为 diamonds 这个数据框的钻石品质数据做个柱状图，看看各种品质的钻石有多少个。 用基础命令，思路很正常也单纯：先用 table() 算出 cut 列每种品质的钻石有多少个，再用 barplot() 把数据用图表达出来： barplot(table(diamonds$cut)) 而 tidyverse，需要先加载包，然后把数据映射过去，最后添加个 x 轴的美学映射——这几个术语我吃不准用得对不对，反正代码就是这样复杂： require(&#39;tidyverse&#39;) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) 再比如说，我想计算一下各种品质钻石的平均价格。 用基础命令，思路很正常也很单纯：一条 tapply() 函数搞定，只需指定一下“算谁，按谁算，咋算”就行了： tapply(diamonds$price, # 算 价格 diamonds$cut, # 按 cut 分类算 mean, na.rm = TRUE) # 求平均 ## Fair Good Very Good Premium Ideal ## 4358.758 3928.864 3981.760 4584.258 3457.542 而 tidyverse，加载包那一步就不提了，需要先用 group_by()按 cut列来分一下组，再用 summarize()来做总结，里面指定一下总结方式是mean()，光是说起来都累： diamonds %&gt;% group_by(cut) %&gt;% summarise(mean(price, na.rm = TRUE)) ## # A tibble: 5 x 2 ## cut `mean(price, na.rm = TRUE)` ## &lt;ord&gt; &lt;dbl&gt; ## 1 Fair 4359. ## 2 Good 3929. ## 3 Very Good 3982. ## 4 Premium 4584. ## 5 Ideal 3458. R 基础包多好啊，为什么那么多初学者会纠结是学 R 基础命令，还是学 tidyverse？ 当时尚有周天子，何事纷纷说魏齐？ 2 这个问题困扰了我好久。 有一天，我决定好好思考一下这个问题。 了解 tidyverse 的最好办法，就是去读官方综合教程：R for Data Science。 原以为大神的书都艰深晦涩，没想到这本书写得非常通俗易懂，就是函数名字难记。我学会了好多动词，比如 mutate 这个词，我一直以为是 X 战警生造的，就像哈利波特里的麻瓜(Muggle)一样。我从来没在任何其他场合听说读写过它，这回算是长知识了。 读着读着，不知怎么，晴空里一道闪电，我突然开了窍，说服了自己：tidyverse 用法的奇葩之处，是有理由的。 tidyverse 的世界里，有一只指南针。有它在手，我此前关于 tidyverse 的困惑一扫而空。 这个指南针就是“管道”。 （可以阅读 yihui 的管道时代一文。） 管道的意思是，管道前面得到的输出，不落地，直接作为管道后面的输入。 打个比方。 不使用管道的时候，好比吃中餐，合餐制。从厨房输出的每道菜，先各自占用一个盘子，再端到大圆桌上，每个人把菜输入到自己碗里。 合餐的好处是你可以自由搭配，想从哪个盘子夹多少菜多少肉都行，到你的碗里就是独一无二的组合，还可以随便放调料。坏处是不仅占桌子占盘子，而且洗碗特别麻烦，因为除了洗每人的碗筷和锅，你还得洗每道菜的盘子这种中间步骤。 西餐就省事多了，分餐制，只需一步，直接将厨房输出的菜输入到每人的盘子里，省却了中间步骤。这就是管道的妙处。 以上是一个家里没有洗碗机而经常从事洗碗劳动的非程序员的日常心得。 正是为了能够全程使用管道，tidyverse 用了一根筋的办法：各个函数，输入的必须是数据框，输出的也必须是数据框。而且最好是超级数据框（ tibble）。 这就好比吃西餐，从锅里输出的必须是比较干的菜，例如香肠土豆什么的，这样才能用刀叉（管道）把他们直接输入到用户的盘子里。如果输出的是汤，对不起，你得把里面的水先煮干，再把其中的干货用刀叉（管道）输出到用户的盘子里。当然，后续可以由用户往里加水复原成汤——奇葩吧？对，这就是为啥 tidyverse 搞出那么多奇葩函数的根本原因。都是为了适应管道的需求。管道两头都必须是类型相同的干货：数据框。 上文举的两个例子，R 基础包用的 table() 和 tapply()，一个要求输入的是一个向量，输出的是一个表格，另一个要求输入的两个向量，输出的是一个数组。输入和输出这两头自己都不一致，跟别的函数更不一致，没法统一用管道。 表面上，R 基础包更省事，然而 zoom out 一下，从总体上看，放到前后相继的一串代码里，却是管道更省事。这算是舍小弊而取大利，为了宏观而牺牲微观吧。 管道符号 %&gt;% 已经普及到了 tidyverse 的大片领地，偏偏是带头大哥的 ggplot2 没有使用，而用了加号。这是因为 %&gt;% 诞生较晚，是个后生。然而后生长过先生，ggplot2 的下一代版本”格格巫师“（ggvis）全面使用%&gt;% 代替加号了，颇有秦朝车同轨书同文的意味。 有了管道，数据处理从最初到最终成品一气呵成，畅快淋漓。可以设想，习惯之后再学 R 基础函数得需要多大勇气和耐心。 3 我接触 R 比较晚。2010 年整整一年，我都在用 Visual Basic 吭哧吭哧跟数据死磕，2011 年才开始真正接触 R（此前只是听说过），不知道此前发生过什么，只知道有 R 基础命令这种周天子，没听说过 ggplot2。 R 基础命令作图能满足我的绝大部分需求。不过，当时我已经知道 lattice 包的存在，震惊的程度不亚于后来遇见 ggplot2。lattice 让我联想到齐桓公，虽然称雄与 R 语言绘图界，但并没有像今天的 ggplot2 给人”你到底是用我还是用 R 基础包？“的选择压力——至少我没有。不用 lattice？没关系，能出结果就行。用 lattice？好啊，画图更方便。齐桓公尊王攘夷，得到了周天子的认可，lattice 包也被 R 基础包认可，常年作为 R 的默认安装包。不知道 lattice 是怎么做到的。 后来，ggplot2 崛起，作为新一代的霸主，在江湖地位上，显然取代了齐桓公 lattice。我不止在一处看到有人建议，R 安装包里应该用 ggplot2 取代 lattice，从周天子层面确认 ggplot2 的霸主地位。只是不知道周天子在犹豫什么。 后来的后来，ggplot2 的周边生态完善，联合了一大群彼此兼容的包，成立了联盟，这便是虎狼之邦的 tidyverse。 如果你是个新居民，刚刚搬家踏上 R 语言的土地，可能会遇到一个奇怪的问题： 你是想住进极乐净土的秦国 tidyverse，还是住进纷繁扰攘的周朝 R base？ 新居民可能摸不着头脑：这是什么逻辑？秦国不是就在周朝里吗？ 别人可能神秘一笑：生活在秦国的人，不需要知道周天子。 原载 openr.org，原标题为“当时尚有 R base，何事纷纷说 tidyverse”↩ "]
]
